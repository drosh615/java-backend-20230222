package trainReservation;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import trainReservation.dto.GetTrainListDto;
import trainReservation.entity.Cost;
import trainReservation.entity.Seat;
import trainReservation.entity.StopStation;
import trainReservation.entity.Train;
import trainReservation.service.ReservationService;

/*
 * 기차정보
 * 열차번호, 출발시간, 도착시간, 걸리는시간, 기차종류, 비용, 정차역, 남아있는 좌석
 * 
 * 예약정보
 * 이름, 좌석번호, 예약번호, 출발역, 도착역, 출발시간, 도착시간
 */
public class MainApplication {
	
	private static DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
	private static ReservationService reservationService = new ReservationService();
	
	public static void main(String[] args) {
		
		while (true) {
			GetTrainListDto dto = new GetTrainListDto(); 
			
			LocalTime departureTime = null;
			
			// 입력 검증
			if (dto.isEmpty()) {
				System.out.println("모두 입력하세요.");
				continue;
			}
			
			try {
				LocalTime.parse(dto.getDepartureTime(), timeFormatter);
			} catch(Exception exception) {
				System.out.println("잘못된 시간입니다. 'HH:mm'형식으로 작성해주세요");
				continue;
			}
			
			if (dto.getNumberOfPeople() <= 0) {
				System.out.println("잘못된 인원입니다");
				continue;
			}
			
			if (dto.isEqualStation()) {
				System.out.println("출발역과 도착역이 같습니다.");
				continue;
			}
			
			// 받아올 내용 생성
			List<Train> possibleTrains = new ArrayList<>();
			
			// 검색
			for (Train train: trains) {
				List<StopStation> stopStations = train.getStopStation();
				// 
				int sameStationIndex = -1;
				
				for (int stopStationIndex = 0; stopStationIndex < stopStations.size(); stopStationIndex++) {
					String stopStationName = stopStations.get(stopStationIndex).getStationName();
					if(!dto.getDepartureStation().equals(stopStationName)) {
						continue;
					}
					
					// 이미 출발한 열차인지 아닌지 확인하기 위한
					LocalTime stationDepartureTime = LocalTime.parse(dto.getDepartureStation(), timeFormatter);
					
					if (stationDepartureTime.isBefore(departureTime)) {
						break;	//이미 지나간 열차 
					}
					
					sameStationIndex = stopStationIndex;
					break;
				}
				if (sameStationIndex == -1) {
					continue;
				}
				
				boolean isPossible =false;
				
				// 출발할 역 이후에 도착할 역이 있는지 확인
				for (int stopStationIndex = 0; stopStationIndex < stopStations.size(); stopStationIndex++) {
					String stationName = stopStations.get(stopStationIndex).getStationName();
					
					if (!dto.isEqualArrivalStation(stationName)) {
						continue;
					}
					
					if (stopStationIndex <= sameStationIndex) {
						break;	//열차 방향이 다름
					}
					
					isPossible = true;
					break;
				}
				
				if (!isPossible) {
					continue;
				}
				
				List<Seat> seats = train.getSeats();
				
				int possibleSeatcount = 0;
				for (Seat seat: seats) {
					if (!seat.isSeatStatus()) {
						possibleSeatcount++;
					}
				}
				
				if (possibleSeatcount < dto.getNumberOfPeople()) {
					continue;
				}
				
				possibleTrains.add(train);
			}
			
			
			//시스템 출력 확인은 정확한 단계를 소화했는지 점검하는 것이다.
			System.out.println(possibleTrains.toString());
		}
	}

	
}
